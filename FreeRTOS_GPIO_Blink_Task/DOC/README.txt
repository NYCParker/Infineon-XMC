栈首就是栈开始的地方，栈顶就是栈中下次即将弹出的第一个元素
栈起始地址是内存开辟的首地址 数组第一位的地址

typedef void (*TaskFunction_t)(void*);
定义一个参数为void *类型,返回值为 void的函数指针类型TaskFunction_t.可以用此类型声明指针变量,存储函数的地址,用指针变量跳转到函数执行

float (*h)(); 
表示h是一个指向返回值float类型的函数的指针 
(float(*)()) 
表示一个"指向返回值float类型的函数的指针"的类型转换符 

C在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址。
有了指向函数的指针变量后。可用该指针变量调用函数，就如同用指针变量可引用其他类型变量一样

TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode)   //任务入口（任务的函数名）

指针 地址 指针 地址 指针 地址 指针 地址 指针 地址 指针 地址

数组名
xTaskCreateStatic StackType_t * const puxStackBuffer 参数是任务栈的数组名
(1)数组名作为函数形参时，在函数体内，其失去了本身的内涵，仅仅只是一个指针； 
(2)很遗憾，在失去其内涵的同时，它还失去了其常量特性，可以作自增、自减等操作，可以被修改。 
所以，数据名作为函数形参时，其全面沦落为一个普通指针！它的贵族身份被剥夺，成了一个地地道道的只拥有4个字节的平民。 
调用时指向数组首元素的地址